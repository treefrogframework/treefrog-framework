{
  "runOn": [
    {
      "minServerVersion": "4.3.1",
      "topology": [
        "replicaset",
        "sharded",
        "load-balanced"
      ]
    }
  ],
  "data": [
    {
      "_id": 1,
      "x": 11
    },
    {
      "_id": 2,
      "x": 22
    }
  ],
  "tests": [
    {
      "description": "FindOneAndUpdate succeeds with RetryableWriteError from server",
      "failPoint": {
        "configureFailPoint": "failCommand",
        "mode": {
          "times": 1
        },
        "data": {
          "failCommands": [
            "findAndModify"
          ],
          "errorCode": 112,
          "errorLabels": [
            "RetryableWriteError"
          ]
        }
      },
      "operation": {
        "name": "findOneAndUpdate",
        "arguments": {
          "filter": {
            "_id": 1
          },
          "update": {
            "$inc": {
              "x": 1
            }
          },
          "returnDocument": "Before"
        }
      },
      "outcome": {
        "result": {
          "_id": 1,
          "x": 11
        },
        "collection": {
          "data": [
            {
              "_id": 1,
              "x": 12
            },
            {
              "_id": 2,
              "x": 22
            }
          ]
        }
      }
    },
    {
      "description": "FindOneAndUpdate fails if server does not return RetryableWriteError",
      "failPoint": {
        "configureFailPoint": "failCommand",
        "mode": {
          "times": 1
        },
        "data": {
          "failCommands": [
            "findAndModify"
          ],
          "errorCode": 11600,
          "errorLabels": []
        }
      },
      "operation": {
        "name": "findOneAndUpdate",
        "arguments": {
          "filter": {
            "_id": 1
          },
          "update": {
            "$inc": {
              "x": 1
            }
          },
          "returnDocument": "Before"
        }
      },
      "outcome": {
        "error": true,
        "result": {
          "errorLabelsOmit": [
            "RetryableWriteError"
          ]
        },
        "collection": {
          "data": [
            {
              "_id": 1,
              "x": 11
            },
            {
              "_id": 2,
              "x": 22
            }
          ]
        }
      }
    },
    {
      "description": "FindOneAndUpdate succeeds after PrimarySteppedDown",
      "failPoint": {
        "configureFailPoint": "failCommand",
        "mode": {
          "times": 1
        },
        "data": {
          "failCommands": [
            "findAndModify"
          ],
          "errorCode": 189,
          "errorLabels": [
            "RetryableWriteError"
          ]
        }
      },
      "operation": {
        "name": "findOneAndUpdate",
        "arguments": {
          "filter": {
            "_id": 1
          },
          "update": {
            "$inc": {
              "x": 1
            }
          },
          "returnDocument": "Before"
        }
      },
      "outcome": {
        "result": {
          "_id": 1,
          "x": 11
        },
        "collection": {
          "data": [
            {
              "_id": 1,
              "x": 12
            },
            {
              "_id": 2,
              "x": 22
            }
          ]
        }
      }
    },
    {
      "description": "FindOneAndUpdate succeeds after WriteConcernError ShutdownInProgress",
      "failPoint": {
        "configureFailPoint": "failCommand",
        "mode": {
          "times": 1
        },
        "data": {
          "failCommands": [
            "findAndModify"
          ],
          "errorLabels": [
            "RetryableWriteError"
          ],
          "writeConcernError": {
            "code": 91,
            "errmsg": "Replication is being shut down"
          }
        }
      },
      "operation": {
        "name": "findOneAndUpdate",
        "arguments": {
          "filter": {
            "_id": 1
          },
          "update": {
            "$inc": {
              "x": 1
            }
          },
          "returnDocument": "Before"
        }
      },
      "outcome": {
        "result": {
          "_id": 1,
          "x": 11
        },
        "collection": {
          "data": [
            {
              "_id": 1,
              "x": 12
            },
            {
              "_id": 2,
              "x": 22
            }
          ]
        }
      }
    }
  ]
}
