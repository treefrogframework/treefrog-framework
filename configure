#!/bin/bash
#
# Guess values for system-dependent variables and create Makefiles.
#

# usage message
usage()
{
  cat <<_EOF
Usage: $0 [OPTION]... [VAR=VALUE]...

Configuration:
  -h, --help          display this help and exit
  --enable-debug      compile with debugging information
  --enable-gui-mod    compile and link with QtGui module

Installation directories:
  --prefix=PREFIX     install files in PREFIX [$PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR        user executables [$BINDIR]
  --libdir=DIR        object code libraries [$LIBDIR]
  --includedir=DIR    C++ header files [$INCLUDEDIR]
  --datadir=DIR       read-only architecture-independent data [$DATADIR]
_EOF
}


# check the platform
if which uname >/dev/null 2>&1; then
  KERNEL=`uname -s`
  MACHINE=`uname -m`
  RELEASE=`uname -r`

  if [ "$QMAKESPEC" != "" ]; then
    OPT="-spec $QMAKESPEC"

    if [ "$MACHINE" = "x86_64" ]; then
      OPT="$OPT CONFIG+=x86_64"
    fi

  elif [ "$KERNEL" = "Darwin" ]; then
    QT_VERSION=$(echo $(qmake -v) | awk '{ print $7 }')
    QT_MAJOR=${QT_VERSION:0:1}
    if [ "$QT_MAJOR" -ge 5 ]; then
      OPT="-spec macx-clang"
    else
      OPT="-spec macx-g++"
    fi

    REL=`echo $RELEASE | tr -d '.'`
    if [ "$REL" -ge  1050 ]; then
      OPT="$OPT CONFIG+=x86_64"
    fi

    if [ "$MACHINE" = "ppc" ]; then
      OPT="$OPT CONFIG+=ppc"
    fi
  else
    if [ "$KERNEL" = "Linux" ]; then
      OPT="-spec linux-g++"
    elif [ "$KERNEL" = "FreeBSD" ]; then
      OPT="-spec freebsd-g++"
    fi

    if [ "$MACHINE" = "x86_64" ]; then
      OPT="$OPT CONFIG+=x86_64"
    fi
  fi
else
  echo "uname: command not found"
  exit
fi

# default values
BASEDIR=`pwd`/`dirname $0`

if [ "$KERNEL" = "Darwin" ]; then
  SED="sed -i '' -e"
  PREFIX=/usr/local
else
  SED="sed -i -e"
  PREFIX=/usr
fi
BINDIR=$PREFIX/bin
LIBDIR=$PREFIX/lib
INCLUDEDIR=$PREFIX/include/treefrog
DATADIR=$PREFIX/share/treefrog

# parse options
while [ -n "`echo $1 | grep '-'`" ]; do
  case $1 in
  *=?*) optarg=`expr "X$1" : '[^=]*=\(.*\)'` ;;
  *=)   optarg= ;;
  *)    optarg=yes ;;
  esac

  case $1 in
    --prefix=*)
      PREFIX=$optarg
      BINDIR=$PREFIX/bin
      LIBDIR=$PREFIX/lib
      INCLUDEDIR=$PREFIX/include/treefrog
      DATADIR=$PREFIX/share/treefrog
      ;;
    --bindir=*)
      BINDIR=$optarg
      ;;
    --libdir=*)
      LIBDIR=$optarg
      ;;
    --includedir=*)
      INCLUDEDIR=$optarg
      ;;
    --datadir=*)
      DATADIR=$optarg
      ;;
    --enable-debug | --enable-debug=*)
      ENABLE_DEBUG=yes
      ;;
    --enable-gui-mod | --enable-gui-mod=*)
      ENABLE_GUI="use_gui=1"
      ;;
    --help | -help | -h | *)
      usage
      exit
      ;;
  esac
  shift
done

cd "$BASEDIR"
$SED "s|unix:LIBS +=.*$|unix:LIBS += -Wl,-rpath,. -Wl,-rpath,$LIBDIR -L$LIBDIR -ltreefrog|" defaults/appbase.pri
$SED "s|unix:INCLUDEPATH +=.*$|unix:INCLUDEPATH += $INCLUDEDIR|" defaults/appbase.pri

if [ -n "$ENABLE_DEBUG" ]; then
  OPT="$OPT CONFIG+=debug"
else
  OPT="$OPT CONFIG+=release"
fi

# search qmake command
if [ -z "$QMAKE" ]; then
  which qmake-qt4 >/dev/null 2>&1 && QMAKE=qmake-qt4
  which qmake-qt5 >/dev/null 2>&1 && QMAKE=qmake-qt5
  which qmake     >/dev/null 2>&1 && QMAKE=qmake

  if [ -z "$QMAKE" ]; then
    echo qmake: command not found
    echo 
    exit
  fi
fi

cd "$BASEDIR/src"
[ -f Makefile ] && make -k distclean >/dev/null 2>&1
$QMAKE $OPT target.path=\"$LIBDIR\" header.path=\"$INCLUDEDIR\" $ENABLE_GUI
cd "$BASEDIR/tools"
[ -f Makefile ] && make -k distclean >/dev/null 2>&1
$QMAKE -recursive $OPT target.path=\"$BINDIR\" header.path=\"$INCLUDEDIR\" datadir=\"$DATADIR\" lib.path=\"$LIBDIR\"
make qmake

# compile MongoDB files
cd "$BASEDIR/3rdparty/mongo-c-driver"
echo
echo -n "Compiling MongoDB driver library ... "
$QMAKE $OPT mongo-c-driver.pro
make clean >/dev/null 2>&1
make >/dev/null 2>&1
RET=$?
if [ $RET != 0 ]; then
  echo "failed"
  echo "MongoDB driver not available."
  exit $RET
fi
echo "OK"

echo
echo "First, run \"make\" and \"sudo make install\" in src directory."
echo "Next, run \"make\" and \"sudo make install\" in tools directory."
